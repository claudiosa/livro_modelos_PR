\chapter{A Linguagem de Programação MiniZinc}


\section{Apresentando o MiniZinc}
\label{sc:minizinc}

Conforme \cite{mzntwds}, antes do advento da linguagem de programação MiniZinc, não existia uma linguagem padrão para a modelagem de problemas de programação por restrições. Praticamente cada \textit{solver} possuia sua própria linguagem de modelagem. Isto dificultava a tarefa de realizar experimentos para comparar o desempenho de diferentes \textit{solvers} para um determinado problema.

O MiniZinc surgiu com a proposta de criar uma linguagem padrão de modelagem, na qual um mesmo modelo pode ser utilizado por diversos \textit{solvers}. 

{\bf \textcolor{red}{Faltando descrever o que sao estes solvers....}}


Além disto, outras de suas qualidades são a simplicidade, a expressividade e a facilidade de implementação \cite{mzntwds}. A simplicidade se encontra principalmente na sintaxe, e a expressividade é dada por permitir modelar diversos tipos de problemas por meio dos recursos disponibilizados.

\section{Elementos da Linguagem}


\subsection{Um Paradigma Computacional}

$$ Modelo + Dados = A_1 \wedge A_2 \wedge A_3 \wedge  ....  \wedge  A_n $$

\begin{itemize}
  \item 
 $A_i: $ são assertivas declaradas (declarações de restrições) sobre o problema

  \item  Logo, esta é uma linguagem  que visa construir rapidamente
modelos sobre os problemas reais.

  \item  Detalhe é que estes \textbf{modelos} são computáveis!


\end{itemize}




\subsection{Estrutura de um Programa em \minizinc}

{\bf \textcolor{red}{Faltando uma figura}}

\subsection{Constantes ou Parâmetros}



As constantes são similares às váriaveis de linguagens de programação comuns. Entretanto, só é permitido atribuir 
um valor a um parâmetro uma vez.

{\bf \textcolor{red}{Faltando ....}}

\subsection{Variáveis}

Variáveis e Variáveis de Decisão (discutidas ao longo do texto) são mais próximas ao conceito de incógnitas da Matemática. O valor de uma váriavel de decisão 
é escolhido pelo Minizinc para atender todas as restrições estabelecidas.


{\bf \textcolor{red}{Faltando ....}}


\begin{description}

  \item[Booleanas:] 
    \item[Inteiras:]
      \item[Reais:]
        \item[Vetores ou Arrays:]
                \item[Conjuntos:]
                
\end{description}

Contudo, caso estas variáveis exibam um domínio
específico, ou restrito, que é o caso de interesse,
estas variáveis são conhecidas como
\textit{variáveis de restrição}.
Estas assumem valores que   são {\em descobertos} dentro de um domínio 
de valores sob um conjunto de restrições que 
é o  \textit{modelo  computado}.


\subsection{Restrições ou Declarações Lógicas}

{\bf \textcolor{red}{Faltando ....}}
\subsection{Satisfatibilidade e Otimização}

{\bf \textcolor{red}{Faltando ....}}
\subsection{Saídas}

{\bf \textcolor{red}{Faltando ....}}


\subsection{Instalação e Uso}

{\bf \textcolor{red}{Revisao ....}}


\begin{enumerate}   

\item Baixar o arquivo .tar.gz \\\hspace*{0.3cm}(http://www.minizinc.org/g12distrib.html)
\item Extrair a pasta.
\item Executar o arquivo SETUP presente na pasta.
\item Alterar a variável PATH, execute o comando:
\\export PATH=\$PATH:/\textless diretório da pasta do 
minizinc\textgreater/bin
\end{enumerate}

\section{Um Exemplo}

Esta seção apresenta um exemplo completo, o qual  resume os conceitos apresentados anteriormente.
Este exemplo provê noções básicas para compreender e desenvolver programas na linguagem MiniZinc, sendo tais programas comumente chamados de modelos. Para isto, é tomado como exemplo um modelo feito em MiniZinc, apresentado na Figura \ref{code:exemple}.

\lstinputlisting[
    label={code:exemple},
    language=Pascal,
    numbers=left, 
    stepnumber=2, 
    frame=single,
    caption={Exemplo de um modelo em MiniZinc}
    ]
    {/home/ccs/Dropbox/CCS/minizinc/nqueens.mzn}


Este é um modelo para o problema das $n$-rainhas, apresentado na Subseção \ref{ss:exemplo-de-modelagem}. A primeira linha contém o comando \textit{include}, que funciona de forma análoga às outras linguagens de programação, como C. Este comando serve para possibilitar a divisão de um mesmo modelo em diversos arquivos e utilizar bibliotecas externas. Neste caso, está sendo incluída a biblioteca de restrições globais por meio do arquivo \textit{globals.mzn}, com o intuito de utilizar a restrição \textit{alldifferent}, pertencente a tal biblioteca, no modelo.

Na linha 3 está sendo declarada a variável $n$ e atribuindo a esta o valor $8$. Tal variável representa o tamanho do tabuleiro, e por consequência a quantidade de rainhas presentes neste. Na linguagem MiniZinc as variáveis podem ser parâmetros ou variáveis de decisão. Os parâmetros são variáveis de valor fixo e conhecido. Já as variáveis de decisão são variáveis cujo valor será atribuído pelo \textit{solver}, de forma a satisfazer todas as restrições.

Os valores dos parâmetros podem ser definidos tanto no próprio modelo, como no caso do modelo apresentado na Figura \ref{code:nqueens}, ou em um arquivo externo de extensão \textit{.dzn}. Caso o usuário esteja utilizando a IDE do MiniZinc, também é possível fornecer os valores dos parâmetros por meio de uma interface gráfica. Tal interface é exibida ao usuário quando este pressiona o botão para executar o modelo e os valores dos parâmetros não são fornecidos no código.

Ao se declarar uma variável em MiniZinc, se faz preciso informar o tipo desta e se esta é um parâmetro ou uma variável de decisão. Entre os tipos de variável disponíveis estão, por exemplo, \textit{int}, \textit{float} e \textit{bool}.

Para se especificar que uma váriavel é de decisão, é necessário utilizar o prefixo \textit{var} antes do tipo da variável. Caso não haja um prefixo antes do tipo de uma variável, o MiniZinc irá considerar esta como sendo um parâmetro, apesar de ser possível utilizar o prefixo \textit{par} para se explicitar que esta é um parâmetro. Desta forma, a variável $n$ declarada na linha 3 é um parâmetro, visto que não há o prefixo \textit{var} antes desta.

Na linha 4 há a declaração do vetor \textit{pos\_rainhas}, que neste modelo representa as posições das rainhas. Neste vetor, a i-ésima posição representa a linha na qual se encontra a rainha que está na i-ésima coluna do tabuleiro.
  
Para se declarar um vetor em MiniZinc, se faz necessário definir o intervalo de índices de cada uma de suas dimensões, o tipo dos seus elementos e se estes são parâmetros ou variáveis de decisão.

No caso do vetor \textit{pos\_rainhas}, há apenas uma dimensão, sendo que os índices variam de $1$ até o valor do parâmetro $n$. Os índices possíveis de cada uma das dimensões do vetor são especificados dentro dos colchetes, após a palavra chave \textit{array}.

Os elementos do vetor \textit{pos\_rainhas} são variáveis de decisão, visto que o intuito do modelo é justamente encontrar as posições em que as rainhas devem ser posicionadas. Neste caso, os valores que os elementos podem assumir estão restringidos a um domínio finito, que é o intervalo inteiro que varia de $1$ até $n$.

A linha 6 apresenta a primeira restrição do modelo, que garante que o valor do parâmetro $n$ informado pelo usuário é maior que três. As restrições em MiniZinc devem iniciar com a palavra chave \textit{constraint} e devem ser expressões booleanas, isto é, devem resultar em verdadeiro ou falso. Tais expressões podem envolver parâmetros, variáveis de decisão e constantes, que devem ser relacionados por meio de algum operador de relação, como $>$, $<=$, $=$ e $!=$.

Para facilitar a modularização dos modelos, o MiniZinc possibilita a definição de predicados, e a partir da versão 2.0, também permite a definição de funções. A linha 8 mostra o predicado \textit{alldifferent}, que faz parte da biblioteca de restrições globais do MiniZinc. Este predicado recebe um vetor de inteiros e garante que os valores dos elementos deste vetor são distintos entre si. Esta restrição é equivalente à primeira desigualdade apresentada na Subseção \ref{ss:exemplo-de-modelagem}.

Na linha 10 é apresentada uma restrição um pouco mais complexa. Esta faz uso do \textit{forall}, que funciona de forma análoga ao quantificador universal $\forall$. Em MiniZinc, utiliza-se o \textit{forall} principalmente quando deseja-se agrupar diversas restrições semelhantes, de modo a simplificar a leitura e o desenvolvimento do modelo. Normalmente tais restrições semelhantes estão vinculadas a vetores ou conjuntos, e se faz possível generalizar estas restrições utilizando iteradores.

Uma das formas de se utilizar o \textit{forall} é especificando um iterador, o conjunto de possíveis valores que este pode assumir e a restrição generalizada em termos deste iterador. Desta forma, para cada um dos valores que o iterador pode assumir será gerada uma expressão \textit{booleana}, em que o iterador será substituido pelo valor assumido. Todas estas expressões geradas são unidas em uma única restrição, sendo que tal união é feita por meio da conjunção de todas as expressões. Desta forma, para que a restrição criada seja satisfeita, todas as expressões \textit{booleanas} geradas devem resultar em verdadeiro.

A linguagem MiniZinc também oferece o \textit{exists}, que funciona de forma praticamente igual ao \textit{forall}, sendo que a única diferença entre estes está na forma como as expressões \textit{booleanas} são unidas, que neste caso é por meio de disjunções. Assim, para que a restrição criada pelo \textit{exists} seja satisfeita, basta que uma das expressões que compõem a restrição seja satisfeita.

No caso da restrição presente na linha 10, o \textit{forall} é utilizado duas vezes, de forma aninhada. Isto é feito pois se faz necessário garantir que todos os pares possíveis de rainhas não estão se atacando mutuamente.

A linha 12 apresenta a expressão \textit{booleana} que verifica se um par de rainhas está ou não se atacando, de forma equivalente à segunda desigualdade apresentada na Seção \ref{ss:exemplo-de-modelagem}. A função \textit{abs} retorna o valor absoluto, ou o módulo, de um inteiro.

Na linha 16, há a indicação de que o problema é de satisfação de restrições. Caso fosse um problema de otimização, seria necessário substituir a palavra chave \textit{satisfy} por \textit{maximize} ou \textit{minimize}, seguido da função que se deseja maximizar ou minimizar.

Por fim, na linha 18 há o comando \textit{output}, pelo qual pode-se imprimir na tela os resultados obtidos. Tal comando é bastante flexível, de forma que saídas complexas podem também ser geradas. Para este problema seria possível, por exemplo, imprimir o tabuleiro utilizando algum caracter para representar as rainhas.

Na biblioteca apresentada no capítulo 4, as funcionalidades são implementadas por meio de funções. Isto é feito para que seja possível utilizar esta biblioteca em qualquer modelo, bastando para isto incluir um arquivo, como foi feito neste exemplo para utilizar a biblioteca de restrições globais. Para exemplificar a definição de funções, a Figura \ref{code:nqueens} apresenta um modelo equivalente ao apresentado anteriormente, entretanto, utilizando uma função para a resolução do problema.

\lstinputlisting[
    label={code:nqueens},
    language=Pascal,
    numbers=left, 
    stepnumber=1, 
    frame=single,
    caption={Exemplo de utilização de função}
    ]{/home/ccs/Dropbox/CCS/minizinc/nqueens_fn.mzn}


Na linha 6 deste exemplo, há a declaração da função. Esta é iniciada com a palavra chave \textit{function}, que é sucedida pela declaração do tipo de retorno da função. Em MiniZinc, toda função precisa obrigatoriamente de um retorno, visto que quando este não se faz necessário pode-se substituir o uso de uma função pelo uso de um predicado.

Após o tipo de retorno, há o identificador da função, que é utilizado na hora de realizar chamadas à função. Após o identificador, há a lista de argumentos da função. Para cada argumento é especificado um tipo e um identificador.

Neste exemplo, a função é chamada de \textit{n\_queens} e recebe como argumento o tamanho do tabuleiro desejado, identificado como \textit{num\_of\_queens}. O retorno desta função é um vetor no qual os elementos são variáveis de decisão inteiras. Este vetor representa uma possível solução para o problema, de acordo com a modelagem proposta anteriormente.

A estrutura \textit{let\{\} in} presente na função, permite o uso de variáveis locais. De forma geral, quando esta estrutura é utilizada em funções, pode-se comparar o conteúdo presente dentro do \textit{let} como sendo o corpo da função, e a expressão após o \textit{in} como sendo o retorno desta.

Após a conclusão de um modelo, se faz preciso utilizar um \textit{solver} para encontrar os valores das variáveis de decisão, de forma a satisfazer todas as restrições. Isto pode ser feito, por exemplo, pela própria IDE fornecida pelo MiniZinc, na qual pode-se editar os modelos e avaliá-los. Caso não haja uma solução possível, o MiniZinc apresenta uma mensagem informando que o modelo é insatisfatível, ou seja, não existe uma atribuição de valores às variáveis de decisão que satisfaça as restrições estabelecidas. Há ainda casos em que o modelo em questão pode ter muitas possibilidades de soluções para serem avaliadas, gerando uma explosão combinatorial, o que pode fazer com que o \textit{solver} não consiga encontrar uma solução em um tempo aceitável.

Para a implementação da biblioteca, alguns outros recursos do MiniZinc que não são explicados nesta seção são utilizados. Porém, tais recursos são explicados à medida em que são utilizados nas implementações.
